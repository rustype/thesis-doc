@inproceedings{Aldrich2009,
  author    = {Aldrich, Jonathan and Sunshine, Joshua and Saini, Darpan and Sparks, Zachary},
  title     = {Typestate-Oriented Programming},
  year      = {2009},
  _address  = {New York, NY, USA},
  _url      = {https://doi.org/10.1145/1639950.1640073},
  doi       = {10.1145/1639950.1640073},
  booktitle = {Proceedings of the 24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA'09)},
  pages     = {1015–1022},
  numpages  = {8}
}

@article{Coblenz2020,
  author     = {Coblenz, Michael and Aldrich, Jonathan and Myers, Brad A. and Sunshine, Joshua},
  title      = {Can Advanced Type Systems Be Usable? An Empirical Study of Ownership, Assets, and Typestate in Obsidian},
  year       = {2020},
  issue_date = {November 2020},
  publisher  = {Association for Computing Machinery},
  _volume    = {4},
  doi        = {10.1145/3428200},
  journal    = {Proceedings of the ACM on Programming Languages (OOPSLA'20)},
  month      = nov,
  articleno  = {132},
  numpages   = {28},
  keywords   = {smart contracts, empirical studies of programming languages, permissions, ownership, typestate, blockchain, assets, linear types}
}

@misc{Coblenz2020a,
  title         = {Obsidian: Typestate and Assets for Safer Blockchain Programming},
  author        = {Michael Coblenz and Reed Oei and Tyler Etzel and Paulette Koronkevich and Miles Baker and Yannick Bloem and Brad A. Myers and Joshua Sunshine and Jonathan Aldrich},
  year          = {2019},
  eprint        = {1909.03523},
  archiveprefix = {arXiv},
  primaryclass  = {cs.PL}
}

@inproceedings{Pucella2008,
  author    = {Pucella, Riccardo and Tov, Jesse A.},
  title     = {Haskell Session Types with (Almost) No Class},
  year      = {2008},
  doi       = {10.1145/1411286.1411290},
  booktitle = {Proceedings of the First ACM SIGPLAN Symposium on Haskell (Haskell'08)},
  pages     = {25–36},
  numpages  = {12},
  location  = {Victoria, BC, Canada}
}

@article{Kokke2019,
  title     = {Rusty Variation: Deadlock-free Sessions with Failure in Rust},
  volume    = {304},
  doi       = {10.4204/EPTCS.304.4},
  journal   = {Electronic Proceedings in Theoretical Computer Science},
  publisher = {Open Publishing Association},
  author    = {Kokke, Wen},
  year      = {2019},
  month     = sep,
  pages     = {48–60}
}

@inproceedings{Ekman2007,
  author    = {Ekman, Torbj\"{o}rn and Hedin, G\"{o}rel},
  title     = {The Jastadd Extensible Java Compiler},
  year      = {2007},
  _url      = {https://doi.org/10.1145/1297027.1297029},
  doi       = {10.1145/1297027.1297029},
  booktitle = {Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA'07)},
  pages     = {1–18},
  numpages  = {18},
  keywords  = {java, modularity, OOP, declarative frameworks, compilers, extensibility}
}

@book{Stroustrup1986,
  _abstract = {The new C++11 standard allows programmers to express ideas more clearly, simply, and directly, and to write faster, more efficient code. Bjarne Stroustrup, the designer and original implementer of C++, has reorganized, extended, and completely rewritten his definitive reference and tutorial for programmers who want to use C++ most effectively.},
  author    = {Stroustrup, Bjarne},
  isbn      = {978-0321563842},
  numpages  = {1366},
  title     = {{The C ++ Programming Language}},
  year      = {2013},
  edition   = {4th},
  publisher = {Addison-Wesley}
}

@inproceedings{Honda1998,
  author    = {Honda, Kohei and Vasconcelos, Vasco T. and Kubo, Makoto},
  title     = {Language primitives and type discipline for structured communication-based programming},
  booktitle = {Proceedings of the European Symposium on Programming (ESOP 1998)},
  year      = {1998},
  publisher = {Springer},
  pages     = {122--138},
  abstract  = {We introduce basic language constructs and a type discipline as a foundation of structured communication-based concurrent programming. The constructs, which are easily translatable into the summation-less asynchronous $\pi$-calculus, allow programmers to organise programs as a combination of multiple flows of (possibly unbounded) reciprocal interactions in a simple and elegant way, subsuming the preceding communication primitives such as method invocation and rendez-vous. The resulting syntactic structure is exploited by a type discipline {\`a} la ML, which offers a high-level type abstraction of interactive behaviours of programs as well as guaranteeing the compatibility of interaction patterns between processes in a well-typed program. After presenting the formal semantics, the use of language constructs is illustrated through examples, and the basic syntactic results of the type discipline are established. Implementation concerns are also addressed.},
  doi       = {10.1007/BFb0053567},
  series    = {LNCS},
  volume    = {1381}
}

@mscthesis{Mota2020,
  author = {Mota, Jo{\~{a}}o},
  note   = {MSc Thesis, NOVA School of Science and Technology},
  title  = {{Coping with the reality: adding crucial features to a typestate-oriented language}},
  year   = {2020},
  url    = {https://github.com/jdmota/java-typestate-checker/blob/28a0acc90e5e3352ec20f8bbd71ab24383976a1e/docs/msc-thesis.pdf}
}

@inproceedings{Klabnik2016,
  author    = {Klabnik, Steve},
  title     = {The History of Rust},
  year      = {2016},
  doi       = {10.1145/2959689.2960081},
  booktitle = {Proceedings of ACM Conference Applicative 2016}
}

@book{Kernighan1978,
  author    = {Brian W. Kernighan, Dennis M. Ritchie},
  edition   = {1st},
  isbn      = {9780131101630},
  publisher = {Prentice Hall},
  title     = {{The ANSI C Programming Language}},
  year      = {1978},
  numpages  = {228}
}

@article{Bezanson2017,
  author     = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B.},
  title      = {Julia: A Fresh Approach to Numerical Computing},
  year       = {2017},
  issue_date = {January 2017},
  publisher  = {Society for Industrial and Applied Mathematics},
  volume     = {59},
  number     = {1},
  doi        = {10.1137/141000671},
  journal    = {SIAM Rev.},
  month      = jan,
  pages      = {65–98},
  numpages   = {34}
}

@inproceedings{Yoshida2014,
  author    = {Yoshida, Nobuko and Hu, Raymond and Neykova, Rumyana and Ng, Nicholas},
  title     = {The Scribble Protocol Language},
  booktitle = {Proceedings of the International Symposium on Trustworthy Global Computing (TGC'13)},
  year      = {2014},
  publisher = {Springer International Publishing},
  pages     = {22--41},
  doi       = {10.1007/978-3-319-05119-2_3}
}

@inproceedings{Strom1983,
  author    = {Strom, Robert E.},
  title     = {Mechanisms for Compile-Time Enforcement of Security},
  year      = {1983},
  doi       = {10.1145/567067.567093},
  pages     = {276–284},
  numpages  = {9},
  booktitle = {Proceedings of the 10th ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages (POPL '83)}
}

@article{Strom1986,
  author  = {Strom, Robert E. and Yemini, Shaula},
  journal = {IEEE Transactions on Software Engineering},
  title   = {Typestate: A programming language concept for enhancing software reliability},
  year    = {1986},
  volume  = {SE-12},
  number  = {1},
  pages   = {157-171},
  doi     = {10.1109/TSE.1986.6312929}
}

@article{Trindade2020,
  title     = {Typestates to Automata and back: a tool},
  volume    = {324},
  doi       = {10.4204/EPTCS.324.4},
  journal   = {Electronic Proceedings in Theoretical Computer Science},
  publisher = {Open Publishing Association},
  author    = {Trindade, André and Mota, João and Ravara, António},
  year      = {2020},
  month     = sep,
  pages     = {25–42}
}

@article{Vasconcelos2006,
  _abstract = {We define a language whose type system, incorporating session types, allows complex protocols to be specified by types and verified by static type checking. A session type, associated with a communication channel, specifies the state transitions of a protocol and also the data types of messages associated with transitions; thus type checking can verify both correctness of individual messages and correctness of sequences of transitions. Previously, session types have mainly been studied in the context of the $\pi$-calculus; instead, our formulation is based on a multithreaded functional language with side-effecting input/output operations. Our typing judgements statically describe dynamic changes in the types of channels, and our function types not only specify argument and result types but also describe changes in channels. We formalize the syntax, semantics and type checking system of our language, and prove subject reduction and runtime type safety theorems. {\textcopyright} 2006 Elsevier B.V. All rights reserved.},
  author    = {Vasconcelos, Vasco T. and Gay, Simon J. and Ravara, Ant{\'{o}}nio},
  doi       = {10.1016/j.tcs.2006.06.028},
  journal   = {Theoretical Computer Science},
  number    = {1-2},
  pages     = {64--87},
  title     = {{Type checking a multithreaded functional language with session types}},
  volume    = {368},
  year      = {2006}
}

@article{Macedo2019,
  author        = {Rita Macedo and Artur Miguel Dias and Ant{\'{o}}nio Ravara},
  title         = {Visualiza{\c{c}}{\~{a}}o e anima{\c{c}}{\~{a}}o de aut{\'{o}}matos em Ocsigen Framework},
  year          = {2019},
  _url          = {http://arxiv.org/abs/1907.05384},
  archiveprefix = {arXiv},
  eprint        = {1907.05384}
}

@inproceedings{Lagaillardie2020,
  author    = {Lagaillardie, Nicolas and Neykova, Rumyana and Yoshida, Nobuko},
  title     = {Implementing Multiparty Session Types in Rust},
  booktitle = {Proceedings of the International Conference on Coordination Languages and Models (COORDINATION'20)},
  year      = {2020},
  publisher = {Springer International Publishing},
  pages     = {127--136},
  doi       = {10.1007/978-3-030-50029-0_8},
  series    = {LNCS},
  volume    = {12134}
}

@techreport{Reis2002,
  author      = {Reis, Rog{\'{e}}rio and Moreira, Nelma},
  title       = {{FAdo: tools for finite automata and regular expressions manipulation}},
  year        = {2002},
  institution = {Universidade do Porto},
  number      = {DCC-2002-02}
}

@inproceedings{Jespersen2015,
  author    = {Jespersen, Thomas Bracht Laumann and Munksgaard, Philip and Larsen, Ken Friis},
  title     = {Session Types for Rust},
  year      = {2015},
  doi       = {10.1145/2808098.2808100},
  booktitle = {Proceedings of the 11th ACM SIGPLAN Workshop on Generic Programming (WGP'15)},
  pages     = {13–22},
  numpages  = {10}
}

@article{Kouzapas2018,
  title   = {Typechecking protocols with Mungo and StMungo: A session type toolchain for Java},
  journal = {Science of Computer Programming},
  volume  = {155},
  pages   = {52-75},
  year    = {2018},
  doi     = {10.1016/j.scico.2017.10.006},
  _url    = {https://www.sciencedirect.com/science/article/pii/S0167642317302186},
  author  = {Dimitrios Kouzapas and Ornela Dardha and Roly Perera and Simon J. Gay}
}

@article{Gay2015,
  title   = {{Modular session types for objects}},
  author  = {Simon J. Gay and Nils Gesbert and António Ravara and Vasco T. Vasconcelos},
  _url    = {https://lmcs.episciences.org/1613},
  doi     = {10.2168/LMCS-11(4:12)2015},
  journal = {{Logical Methods in Computer Science}},
  volume  = {{Volume 11, Issue 4}},
  year    = {2015},
  month   = dec
}

@inproceedings{Vasconcelos2017,
  author    = {Vasconcelos, Cl\'{a}udio and Ravara, Ant\'{o}nio},
  title     = {From Object-Oriented Code with Assertions to Behavioural Types},
  year      = {2017},
  publisher = {Association for Computing Machinery},
  doi       = {10.1145/3019612.3019733},
  booktitle = {Proceedings of the Symposium on Applied Computing (SAC'17)},
  pages     = {1492–1497},
  numpages  = {6}
}

@article{Xi2016,
  _abstract     = {We present a formalization of session types in a multi-threaded lambda-calculus (MTLC) equipped with a linear type system, establishing for the MTLC both type preservation and global progress. The latter (global progress) implies that the evaluation of a well-typed program in the MTLC can never reach a deadlock. As this formulated MTLC can be readily embedded into ATS, a full-fledged language with a functional programming core that supports both dependent types (of DML-style) and linear types, we obtain a direct implementation of session types in ATS. In addition, we gain immediate support for a form of dependent session types based on this embedding into ATS. Compared to various existing formalizations of session types, we see the one given in this paper is unique in its closeness to concrete implementation. In particular, we report such an implementation ready for practical use that generates Erlang code from well-typed ATS source (making use of session types), thus taking great advantage of the infrastructural support for distributed computing in Erlang.},
  archiveprefix = {arXiv},
  arxivid       = {1603.03727},
  author        = {Xi, Hongwei and Ren, Zhiqiang and Wu, Hanwen and Blair, William},
  eprint        = {1603.03727},
  keywords      = {Computer Science - Logic in Computer Science,Computer Science - Programming Languages},
  title         = {{Session Types in a Linearly Typed Multi-Threaded Lambda-Calculus}},
  year          = {2016},
  archiveprefix = {arXiv},
  primaryclass  = {cs.PL}
}

@article{Xi2016a,
  _abstract     = {Traditionally, each party in a (dyadic or multiparty) session implements exactly one role specified in the type of the session. We refer to this kind of session as an individual session (i-session). As a generalization of i-session, a group session (g-session) is one in which each party may implement a group of roles based on one channel. In particular, each of the two parties involved in a dyadic g-session implements either a group of roles or its complement. In this paper, we present a formalization of g-sessions in a multi-threaded lambda-calculus (MTLC) equipped with a linear type system, establishing for the MTLC both type preservation and global progress. As this formulated MTLC can be readily embedded into ATS, a full-fledged language with a functional programming core that supports both dependent types (of DML-style) and linear types, we obtain a direct implementation of linearly typed g-sessions in ATS. The primary contribution of the paper lies in both of the identification of g-sessions as a fundamental building block for multiparty sessions and the theoretical development in support of this identification.},
  archiveprefix = {arXiv},
  arxivid       = {1604.03020},
  author        = {Xi, Hongwei and Wu, Hanwen},
  eprint        = {1604.03020},
  keywords      = {Computer Science - Programming Languages},
  title         = {{Linearly Typed Dyadic Group Sessions for Building Multiparty Sessions}},
  year          = {2016},
  archiveprefix = {arXiv},
  primaryclass  = {cs.PL}
}

@book{Gay2017,
  author    = {Gay, Simon and Ravara, Ant{\'{o}}nio},
  booktitle = {Behavioural Types: from Theory to Tools English},
  doi       = {10.13052/rp-9788793519817},
  title     = {{Behavioural types: From theory to tools english}},
  year      = {2017}
}

@inproceedings{Voinea2020,
  author    = {Voinea, A. Laura and Dardha, Ornela and Gay, Simon J.},
  title     = {Typechecking Java Protocols with [St]Mungo},
  booktitle = {Proceedings of the International Conference on Formal Techniques for Distributed Objects, Components, and Systems (FORTE'20)},
  year      = {2020},
  publisher = {Springer International Publishing},
  pages     = {208--224},
  doi       = {10.1007/978-3-030-50086-3_12},
  series    = {LNCS},
  volume    = {12136}
}

@techreport{DeLine2004,
  author    = {DeLine, Rob and Fahndrich, Manuel},
  title     = {The Fugue Protocol Checker: Is Your Software Baroque?},
  year      = {2004},
  month     = jan,
  _abstract = {Even in a safe programming language, such as C or Java, disobeying the rules for using an interface can cause exceptions at run time. Such rules govern how system resources are managed, the order of method calls, and the formatting of string parameters, such as SQL queries. This paper introduces Fugue, a modular static checker for languages that compile to the Common Language Runtime. Fugue allows the rules for using an interface to be recorded as declarative specifications and provides a range of annotations that allow a developer to specify interface rule with varying precision. At the simplest end of the range, a specifier can mark those methods that allocate and release resources. A specifier can also limit the order in which an object’s methods may be called to the transitions of a finite state machine. At the most complex end of the range, a specifier can give a method a plug-in pre- and postconditon, which is arbitrary code that examines an object’s current state and a static approximation of the method’s actuals, decides whether the call is legal and returns the object’s state after the call. We used these features to specify rules for using ado.net, a library for accessing relational databases, and found several errors in an internal Microsoft Research web site, which extensively uses this library.},
  publisher = {Microsoft Research},
  url       = {https://www.microsoft.com/en-us/research/publication/the-fugue-protocol-checker-is-your-software-baroque/},
  number    = {MSR-TR-2004-07}
}

@article{Ancona2016,
  _url    = {http://dx.doi.org/10.1561/2500000031},
  year    = {2016},
  volume  = {3},
  journal = {Foundations and Trends® in Programming Languages},
  title   = {Behavioral Types in Programming Languages},
  doi     = {10.1561/2500000031},
  number  = {2-3},
  pages   = {95-230},
  author  = {Davide Ancona and Viviana Bono and Mario Bravetti and Joana Campos and Giuseppe Castagna and Pierre-Malo Deniélou and Simon J. Gay and Nils Gesbert and Elena Giachino and Raymond Hu and Einar Broch Johnsen and Francisco Martins and Viviana Mascardi and Fabrizio Montesi and Rumyana  Neykova and Nicholas Ng and Luca Padovani and Vasco T. Vasconcelos and Nobuko Yoshida}
}

@article{Fahndrich2002,
  author     = {Fahndrich, Manuel and DeLine, Robert},
  title      = {Adoption and Focus: Practical Linear Types for Imperative Programming},
  year       = {2002},
  issue_date = {May 2002},
  publisher  = {Association for Computing Machinery},
  volume     = {37},
  number     = {5},
  _url       = {https://doi.org/10.1145/543552.512532},
  doi        = {10.1145/543552.512532},
  journal    = {SIGPLAN Not.},
  month      = may,
  pages      = {13–24},
  numpages   = {12},
  keywords   = {linear types, region-based memory management, heap aliasing}
}

@inproceedings{Cutner2021,
  author    = {Cutner, Zak and Yoshida, Nobuko},
  title     = {Safe Session-Based Asynchronous Coordination in Rust},
  booktitle = {Proceedings of the International Conference on Coordination Languages and Models (COORDINATION 2021)},
  year      = {2021},
  publisher = {Springer International Publishing},
  pages     = {80--89},
  doi       = {10.1007/978-3-030-78142-2_5},
  series    = {LNCS},
  volume    = {12717}
}

@inproceedings{Hu2008,
  author    = {Hu, Raymond and Yoshida, Nobuko and Honda, Kohei},
  title     = {Session-Based Distributed Programming in Java},
  booktitle = {Proceedings of the European Conference on Object-Oriented Programming (ECOOP 2008)},
  year      = {2008},
  publisher = {Springer},
  pages     = {516--541},
  doi       = {10.1007/978-3-540-70592-5_22}
}

@article{Huttel2016,
  author     = {H\"{u}ttel, Hans and Lanese, Ivan and Vasconcelos, Vasco T. and Caires, Lu\'{\i}s and Carbone, Marco and Deni\'{e}lou, Pierre-Malo and Mostrous, Dimitris and Padovani, Luca and Ravara, Ant\'{o}nio and Tuosto, Emilio and Vieira, Hugo Torres and Zavattaro, Gianluigi},
  title      = {Foundations of Session Types and Behavioural Contracts},
  year       = {2016},
  issue_date = {July 2016},
  volume     = {49},
  number     = {1},
  _url       = {https://doi.org/10.1145/2873052},
  doi        = {10.1145/2873052},
  journal    = {ACM Computing Survey},
  month      = apr,
  articleno  = {3},
  numpages   = {36},
  keywords   = {Behavioural types}
}

@misc{Leroy2020,
  author  = {Xavier Leroy and Damien Doligez and Alain Frisch and Jacques Garrigue and Didier R\'{e}my and J\'{e}r\^{o}me Vouillon},
  title   = {{The OCaml system  release 4.12}},
  url     = {https://ocaml.org/manual/},
  urldate = {2021-07-17},
  year    = {2021}
}

@inproceedings{Neykova2018,
  author    = {Neykova, Rumyana and Hu, Raymond and Yoshida, Nobuko and Abdeljallal, Fahd},
  title     = {A Session Type Provider: Compile-Time API Generation of Distributed Protocols with Refinements in F\#},
  year      = {2018},
  doi       = {10.1145/3178372.3179495},
  booktitle = {Proceedings of the 27th International Conference on Compiler Construction (CC'18)},
  pages     = {128–138},
  numpages  = {11},
  location  = {Vienna, Austria}
}

@inproceedings{Honda1993,
  author    = {Honda, Kohei},
  title     = {Types for dyadic interaction},
  booktitle = {Proceedings of the International Conference on Concurrency Theory (CONCUR'93)},
  year      = {1993},
  publisher = {Springer},
  pages     = {509--523},
  doi       = {10.1007/3-540-57208-2_35},
  series    = {LNCS},
  volume    = {715}
}

@misc{Torre2014,
  author = {Torre, Charles and Stroustrup, Bjarne and Alexandrescu, Andrei and Pike, Rob and Matsakis, Niko},
  title  = {{Panel: Systems Programming in 2014 and Beyond}},
  url    = {https://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2014/Panel-Systems-Programming-Languages-in-2014-and-Beyond},
  year   = {2014}
}

@misc{RustRef2021,
  title   = {{The Rust Reference}},
  url     = {https://doc.rust-lang.org/reference},
  urldate = {2021-01-18},
  year    = {2021}
}

@misc{RustBook2021,
  title   = {{The Rust Programming Language}},
  url     = {https://doc.rust-lang.org/book/},
  urldate = {2021-01-18},
  year    = {2021}
}

@inproceedings{Ritchie1993,
  author    = {Ritchie, Dennis M.},
  title     = {The Development of the C Language},
  year      = {1993},
  doi       = {10.1145/154766.155580},
  booktitle = {The Second ACM SIGPLAN Conference on History of Programming Languages (HOPL-II)},
  pages     = {201–208},
  numpages  = {8}
}

